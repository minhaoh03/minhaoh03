class Solution {
    public void nextPermutation(int[] nums) {
        int record = nums.length-1;
        if(ifLargest(nums)) {
            nums = reverse(nums);
            return;
        } 
        for(int i = nums.length-2; i >= 0; --i) {
            if(nums[i] < nums[i+1]) {
                record = i;
                swap(nums, secondBig(nums, i), i);
                break;
            }
        }
        nextSmallest(nums, record+1);
    }
    
    public int secondBig(int[] nums, int start) {
        int second = start+1;
        for(int i = second; i < nums.length; ++i) {
            if(nums[i] > nums[start] && nums[i] < nums[second]) {
                second = i;
            }
        }
        return second;
    }
    
    public void nextSmallest(int[] nums, int start) {
        if(start >= nums.length-1)
            return;
        int s = start+1;
        for(int i = s; i < nums.length; ++i) {
            if(nums[i] < nums[s])
                s = i;
        }
        if(nums[s] < nums[start]) swap(nums, start, s);
        nextSmallest(nums, start+1);
    }
    
    public int[] reverse(int[] nums) {
        int a = 0;
        int b = nums.length-1;
        while(a<b) {
            swap(nums,a,b);
            ++a;
            --b;
        }
        return nums;
    }
    public boolean ifLargest(int[] nums) {
        for(int i = 1; i < nums.length; ++i) {
            if(nums[i] > nums[i-1])
                return false;
        }
        return true;
    }
    

    public void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
